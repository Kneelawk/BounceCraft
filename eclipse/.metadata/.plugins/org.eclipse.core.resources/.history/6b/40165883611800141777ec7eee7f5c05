package com.pommert.jedidiah.bouncecraft.fmp

import codechicken.multipart.TCuboidPart
import codechicken.lib.vec.Cuboid6
import codechicken.lib.vec.Rotation
import codechicken.lib.vec.Vector3
import net.minecraftforge.client.model.AdvancedModelLoader
import com.pommert.jedidiah.bouncecraft.ref.ModRef
import net.minecraft.util.ResourceLocation
import net.minecraftforge.client.model.obj.WavefrontObject
import net.minecraftforge.common.util.ForgeDirection
import net.minecraft.nbt.NBTTagCompound
import codechicken.lib.data.MCDataInput
import codechicken.lib.data.MCDataOutput
import net.minecraft.item.ItemStack
import com.pommert.jedidiah.bouncecraft.items.BCItems
import java.util.Arrays
import java.lang.{ Iterable => JIterable }
import net.minecraft.util.MovingObjectPosition
import net.minecraft.entity.Entity
import cpw.mods.fml.relauncher.SideOnly
import cpw.mods.fml.relauncher.Side
import net.minecraft.client.Minecraft
import com.pommert.jedidiah.bouncecraft.fmp.logic.BCPartLogic

class BCMultiPart(f: ForgeDirection, l: BCPartLogic) extends TCuboidPart {
	var facing: ForgeDirection = f
	var logic: BCPartLogic = l

	def this() = this(null, null)

	@Override
	def getBounds = BCMultiPart.sides(facing.ordinal)

	@Override
	def getType = "bc_multipart"

	@Override
	override def load(tag: NBTTagCompound) {
		facing = ForgeDirection.VALID_DIRECTIONS(tag.getByte("facing"))
	}

	@Override
	override def save(tag: NBTTagCompound) {
		tag.setByte("facing", if(facing != null) facing.ordinal().asInstanceOf[Byte] else 0.asInstanceOf[Byte])
	}

	@Override
	override def readDesc(packet: MCDataInput) {
		facing = ForgeDirection.VALID_DIRECTIONS(packet.readByte())
	}

	@Override
	override def writeDesc(packet: MCDataOutput) {
		packet.writeByte(facing.ordinal().asInstanceOf[Byte])
	}

	def getItem = new ItemStack(BCItems.items.get("itemTestMultiPart"))

	@Override
	override def getDrops = Arrays.asList(getItem)

	@Override
	override def pickItem(hit: MovingObjectPosition) = getItem

	@Override
	override def onEntityCollision(entity: Entity) {

	}

	@Override
	@SideOnly(Side.CLIENT)
	override def renderDynamic(pos: Vector3, f: Float, pass: Int) {
		if (pass == 0) {
			Minecraft.getMinecraft().renderEngine.bindTexture(BCMultiPart.texture)
		}
	}
}

object BCMultiPart {
	val sides = new Array[Cuboid6](6)
	sides(0) = new Cuboid6(0, 0, 0, 1, 1 / 16D, 1)
	for (i <- 1 to 6) {
		val t = Rotation.sideRotations(i).at(Vector3.center)
		sides(i) = sides(0).copy().apply(t)
	}

	@SideOnly(Side.CLIENT)
	val model = AdvancedModelLoader.loadModel(new ResourceLocation(ModRef.MOD_ID, "models/blockBounce.obj")).asInstanceOf[WavefrontObject]

	@SideOnly(Side.CLIENT)
	val texture = new ResourceLocation(ModRef.MOD_ID, "textures/blocks/blockBounce.png")
}